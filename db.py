import psycopg2
from sniper_bot import get_wall_posts, get_group_info, translate_to_english, \
    get_extract, translate_to_russia, get_title
import requests
from config import token, admin_id
from openpyxl import Workbook
from config import token
import os


class Database:
    def __init__(self, host, user, password, database, port):
        self.connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=database,
            port=port
        )
        self.connection.autocommit = True
    
    def get_version(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –°–£–ë–î PostgreSQL"""
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            print(f'Server version: {cursor.fetchone()[0]}')

    def get_groups(self):
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT group_link FROM providers"
            )
            groups = cursor.fetchall()
        return groups


    def standart_mailing(self):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT user_id FROM users")
            user_ids = cursor.fetchall()
    
            cursor.execute("SELECT COUNT(user_id) FROM users")
            user_count = cursor.fetchone()[0]
        return user_ids, user_count
    
    
    def provider_mailing(self, post_id):
        """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É –ò–ò"""
        with self.connection.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Å—Ç–∞
            cursor.execute("SELECT providers.id FROM providers JOIN news ON providers.group_link = news.group_screen_name WHERE news.post_id = %s", [post_id])
            provider_id = cursor.fetchone()[0]
    
            # –ü–æ–ª—É—á–∞–µ–º user_id –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            cursor.execute("SELECT users.user_id, subscribed_providers.subscriptions FROM users JOIN subscribed_providers ON users.id = subscribed_providers.fk_id WHERE %s = ANY(subscribed_providers.subscriptions)", [provider_id])
            user_ids = cursor.fetchall()
    
            cursor.execute("SELECT COUNT(*) FROM users JOIN subscribed_providers ON users.id = subscribed_providers.fk_id WHERE %s = ANY(subscribed_providers.subscriptions)", [provider_id])
            subscription_count = cursor.fetchone()[0]
    
        return user_ids, subscription_count
    
    def export_to_excel(self, user_id):
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT * FROM users"
            )
    
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ –∏ –ª–∏—Å—Ç–∞ –≤ –Ω–µ–º
            workbook = Workbook()
            worksheet = workbook.active
    
            # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É Excel-—Ñ–∞–π–ª–∞
            worksheet.append(["id", "user_id", "referrer_id", "user_name", "user_phone", "registration_date"])
    
            # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ Excel-—Ñ–∞–π–ª
            for row in cursor.fetchall():
                worksheet.append(row)
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–∞–π–ª
            workbook.save("users.xlsx")
    
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
            with open("users.xlsx", "rb") as file:
                 file_data = file.read()
    
                 text = 'üîñ–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users'
    
                 form_data = {
                    'document': ('users.xlsx', file_data)
                 }
                 url = f'https://api.telegram.org/bot{token}/sendDocument?caption={text}'
                 requests.post(url, data={'chat_id': user_id}, files=form_data)
    
            # –£–¥–∞–ª–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
            os.remove("users.xlsx")
    
    def get_provider_statistics(self):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT providers.name, COUNT(subscribed_providers.subscriptions) AS subscription_count FROM providers LEFT JOIN subscribed_providers ON providers.id = ANY(subscribed_providers.subscriptions) GROUP BY providers.id ORDER BY providers.name")
            result = cursor.fetchall()
        return result
        
    
    def get_bot_statistics(self):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(id) FROM users")
            result = cursor.fetchone()[0]
        return result
        
    
    async def sniper_bot(self, group):
        post = get_wall_posts(group)
    
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT EXISTS(SELECT id FROM news WHERE post_id = %s)", [post[0]]
            )
            result = cursor.fetchone()[0]
        
        if result is False:
            group_info = get_group_info(group)
            
            post[2].replace("\n", "")
            english_text = translate_to_english(post)
            edit_text = get_extract(english_text)
    
            russian_text = translate_to_russia(edit_text)
            title = get_title(russian_text)
    
            with self.connection.cursor() as cursor:
                cursor.execute("INSERT INTO news (group_id, group_name, group_screen_name, title, post_id, stock_post, ai_post, media, date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)", 
                    (group_info[0], group_info[1], group_info[2], title, post[0], post[2], russian_text, post[1], post[3]))
            
            text = f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç: {post[0]}'
            for admin in admin_id:
                requests.post(
                    f'https://api.telegram.org/bot{token}/sendMessage?chat_id={admin}&parse_mode=html&text={text}')
                
    
    def get_analogy(self, post_id):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT stock_post FROM news WHERE post_id = %s", [post_id])
            stock_post = cursor.fetchone()[0]
    
            english_text = translate_to_english(stock_post)
            edit_text = get_extract(english_text)
    
            russian_text = translate_to_russia(edit_text)
            title = get_title(russian_text)
    
            cursor.execute("UPDATE news SET title = %s, ai_post = %s WHERE post_id = %s", [title, russian_text, post_id])
    
            cursor.execute("SELECT title, ai_post FROM news WHERE post_id = %s", [post_id])
            edited_post = cursor.fetchall()
            return edited_post
    
    
    def get_post_id(self):
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT post_id FROM news WHERE status = 'waiting'"
            )
    
            news = cursor.fetchall()
            return news
        
    def edit_status_post(self, status, post_id):
        with self.connection.cursor() as cursor:
            if status == 'post_confirm':
                cursor.execute("UPDATE news SET status = 'confirmed' WHERE post_id = %s", [post_id])
            else:
                cursor.execute("UPDATE news SET status = 'cancelled' WHERE post_id = %s", [post_id])
    
    def get_post(self, post_id):
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT group_id, group_name, title, post_id, ai_post, date FROM news WHERE post_id = %s", [post_id]
            )
    
            post = cursor.fetchall()[0]
        return post
    
    
    def get_news(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —é–∑–µ—Ä"""
        with self.connection.cursor() as cursor:
        
            cursor.execute(
                "SELECT id FROM users WHERE user_id = %s", [user_id]
            )
            fk_id = cursor.fetchone()[0]
    
            cursor.execute(
                "SELECT subscriptions FROM subscribed_providers WHERE fk_id = %s", [fk_id]
            )
            subscribed_news = cursor.fetchall()[0]
    
            cursor.execute(
                "SELECT id, name FROM providers"
            )
    
            providers = cursor.fetchall()
    
            return providers, subscribed_news
        
    def get_sub_news(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —é–∑–µ—Ä"""
        with self.connection.cursor() as cursor:
        
            cursor.execute(
                    "SELECT id FROM users WHERE user_id = %s", [user_id]
                )
            fk_id = cursor.fetchone()[0]
            
            cursor.execute(
                "SELECT subscriptions FROM subscribed_providers WHERE fk_id = %s", [fk_id]
            )
    
            subscriptions = cursor.fetchall()[0]
    
            if subscriptions[0]:
            
                query = "SELECT id, name FROM providers WHERE id IN %s;"
                cursor.execute(query, (tuple(subscriptions[0]),))
                subscriptions = cursor.fetchall()
                return subscriptions
        
            else:
                return None
    
        
    def get_provider_name(self, provider_id, user_id):
        """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ id"""
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT id, name FROM providers WHERE id = %s", [provider_id]
            )
    
            provider_name = cursor.fetchall()[0]
    
            cursor.execute(
                    "SELECT id FROM users WHERE user_id = %s", [user_id]
                )
            fk_id = cursor.fetchone()[0]
    
            cursor.execute(
                "SELECT subscriptions FROM subscribed_providers WHERE fk_id = %s", [fk_id]
            )
            subscribed_news = cursor.fetchall()[0]
            return provider_name, subscribed_news
    
    def check_registration(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT user_id FROM users WHERE user_id = %s", [user_id]
            )
    
            reg_status = cursor.fetchone()
            return reg_status
    
    def register_user(self, user_id, user_name, user_phone, referrer_id=None):
        """–†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –∑–∞–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        with self.connection.cursor() as cursor:
            if referrer_id:
                if referrer_id != user_id:
                    cursor.execute(
                        "INSERT INTO users (user_id, user_name, user_phone, referrer_id) VALUES (%s, %s, %s, %s)", 
                        (user_id,  user_name, user_phone, referrer_id[0])
                    )
            else:
                cursor.execute(
                    "INSERT INTO users (user_id, user_name, user_phone) VALUES (%s, %s, %s)", 
                    (user_id, user_name, user_phone))
               
    
    
            cursor.execute(
                "SELECT id FROM users WHERE user_id = %s", [user_id]
            )
    
            fk_id = cursor.fetchone()[0]
    
            cursor.execute(
                "INSERT INTO subscribed_providers (fk_id) VALUES (%s)", 
                [fk_id]
            )
    
    def user_exists(self, user_id):
        with self.connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(id) FROM users WHERE referrer_id = %s", [user_id])
            result = cursor.fetchone()[0]
        return result
    
    def add_sub(self, call_data, user_id, provider_name):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –±–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —é–∑–µ—Ä"""
        with self.connection.cursor() as cursor:
            cursor.execute(
                "SELECT id FROM providers WHERE name = %s", [provider_name]
            )
            provider_id = cursor.fetchone()[0]
            cursor.execute(
                "SELECT id FROM users WHERE user_id = %s", [user_id]
            )
            fk_id = cursor.fetchone()[0]
            cursor.execute(
                "SELECT subscriptions FROM subscribed_providers WHERE fk_id = %s", [fk_id]
            )
        
            subscriptions = cursor.fetchall()[0]
    
            if subscriptions is None:
                subscriptions = []
    
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"
            if 'subscribe' in call_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ —Å—Ç–æ–ª–±—Ü–µ all_news
                if not provider_id in subscriptions:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ —Å—Ç–æ–ª–±–µ—Ü all_news
                    cursor.execute("UPDATE subscribed_providers SET subscriptions = array_append(subscriptions, %s) WHERE fk_id = %s", [provider_id, fk_id])
    
            if 'unsubscribe' in call_data:
                if provider_id in subscriptions[0]:
                    cursor.execute("UPDATE subscribed_providers SET subscriptions = array_remove(subscriptions, %s) WHERE fk_id = %s", [provider_id, fk_id])
    
