import asyncio
from main import bot, dp, connection
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.admin import admin_keyboard, btn_edit_text, btn_mailing, btn_photo_mailing
from config import host, user, password, db_name, port
from keyboards.user import markup, btn_stock, \
      btn_subscribe, btn_unsubscribe, request_phone, \
     my_btn_subscribe, my_btn_unsubscribe, btn_ref
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from contextlib import suppress
from config import admin_id, bot_nickname
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BotBlocked
import re


class Post(StatesGroup):
    waiting_contact = State()
    waiting_text = State()
    waiting_photo = State()

@dp.message_handler(commands=['admin'])
async def admin_panel(message: Message):
    if message.chat.id in admin_id:
        await message.answer('–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=admin_keyboard)
        connection.get_version()

@dp.message_handler(lambda message: message.text in ['–†–∞—Å—Å—ã–ª–∫–∞', '–ù–æ–≤–æ—Å—Ç–∏', '–í—ã–≥—Ä—É–∑–∫–∞', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def process_news_command(message: Message, state: FSMContext):
    if message.chat.id in admin_id:
        if message.text == '–ù–æ–≤–æ—Å—Ç–∏':   
            global post_news
            post_news = InlineKeyboardMarkup()
            rows = connection.get_post_id()
            for row in rows:
                button = InlineKeyboardButton(text='üì¨ #' + str(row[0]), callback_data="message_" + str(row[0]))
                post_news.add(button)

            await message.answer('–ù–æ–≤–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ', reply_markup=post_news)
        
        elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
            await state.finish()
            await Post.waiting_text.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ üëá')

        elif message.text == '–í—ã–≥—Ä—É–∑–∫–∞':
            connection.export_to_excel(message.from_user.id)


        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            provider_statics = connection.get_provider_statistics()
            bot_statics = connection.get_bot_statistics()

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–∞
            statics_str = '\n'.join([f'{provider[0]} - {provider[1]}' for provider in provider_statics])

            await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º: \n\n{statics_str}'
                                 f'\n\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {bot_statics}')

@dp.message_handler(state=Post.waiting_text)
async def get_text_for_post(message: Message, state: FSMContext):
    async with state.proxy() as data: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    
        data['waiting_text'] = message.text
        await message.answer(f"–í–∞—à –ø–æ—Å—Ç:\n\n{data['waiting_text']}", reply_markup=btn_mailing)
        await state.reset_state(with_data=False)

@dp.callback_query_handler(lambda call: call.data in ['add_picture', 'mail_confirm', 'mail_cancel'])
async def standart_mailing_settings(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    async with state.proxy() as data: 
        message_text = data['waiting_text']

        with suppress(MessageNotModified):
            if call.data == 'add_picture':
                await call.message.edit_text('üì≤–ü—Ä–µ–∫—Ä–µ–ø–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É')
                await Post.waiting_photo.set()

            if call.data == 'mail_confirm':
                await bot.answer_callback_query(call.id)
                await call.message.delete()

                user_ids, count_before = connection.standart_mailing()
                count_after = 0
                for user_id in user_ids:
                    try:
                        await bot.send_message(user_id[0], message_text) 
                        count_after += 1
                    except BotBlocked:
                        pass

                    await asyncio.sleep(5)
                
                await call.message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {str(count_after)} –∏–∑ {str(count_before)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                

            elif call.data == 'mail_cancel':
                await call.message.edit_text('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')


@dp.message_handler(state=Post.waiting_photo, content_types=types.ContentType.PHOTO) # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def set_mailing_photo(message: Message, state: FSMContext):
    async with state.proxy() as data: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['waiting_photo'] = message.photo[-1].file_id
        await bot.send_photo(message.chat.id, photo=data['waiting_photo'], caption=data['waiting_text'], reply_markup=btn_photo_mailing)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(lambda call: call.data in ['photo_confirm', 'photo_cancel'])
async def send_mailing_photo(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        message_text = data['waiting_text']
        message_photo = data['waiting_photo']
        with suppress(MessageNotModified):
            user_ids, count_before = connection.standart_mailing()
            count_after = 0
            if call.data == 'photo_confirm':
                await call.message.delete()
                for user_id in user_ids:
                    try:
                        if not user_id[0] in admin_id:
                            await bot.send_photo(user_id[0], photo=message_photo, caption=message_text)
                        count_after += 1
                    except BotBlocked:
                        pass

                    await asyncio.sleep(5)
                
                await call.message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {str(count_after)} –∏–∑ {str(count_before)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

            elif call.data == 'photo_cancel':
                await call.message.delete()
                await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')

            await state.finish()

@dp.callback_query_handler(lambda call: 'message' in call.data)
async def news_of_providers(call: CallbackQuery):

    global post_id, group_id, values

    post_id = call.data.split('_')[1]
    values = connection.get_post(post_id)
    group_id = values[0]

    await call.message.edit_text('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\nüìã–ù–æ–≤—ã–π –ø–æ—Å—Ç: #{values[3]}'
                                 f'\nüíº–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {values[1]}'
                                 f'\n‚è∞–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {values[5]}'
                                 '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\n\nüìÆ{values[2]}'
                                 f'\n\nüëâ{values[4]}'
                                 f'\n\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: https://vk.com/wall-{str(group_id)}_{str(post_id)}', reply_markup=btn_edit_text)
    

@dp.callback_query_handler(lambda call: call.data in ['analogy', 'post_confirm', 'post_cancel', 'back'])
async def news_settings(call: CallbackQuery):
    user_id = call.from_user.id
    with suppress(MessageNotModified):
        if call.data == 'analogy':
            await bot.answer_callback_query(call.id)
            await call.message.edit_text('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\nüìã–ü–æ—Å—Ç id: #{values[3]}'
                                 f'\nüíº–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {values[1]}'
                                 f'\n‚è∞–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {values[5]}'
                                 '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\n\n‚è≥–û–∂–∏–¥–∞–π—Ç–µ, –º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç...')
            
            edited_post = connection.get_analogy(post_id)
            await call.message.edit_text('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\nüìã–ü–æ—Å—Ç id: #{values[3]}'
                                 f'\nüíº–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {values[1]}'
                                 f'\n‚è∞–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {values[5]}'
                                 '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\n\nüìÆ{edited_post[0][0]}'
                                 f'\n\nüëâ{edited_post[0][1]}'
                                 f'\n\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: https://vk.com/wall-{str(group_id)}_{str(post_id)}', reply_markup=btn_edit_text)
            
        elif call.data == 'post_confirm':
            await bot.answer_callback_query(call.id)
            await call.message.edit_text('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\nüìã–ü–æ—Å—Ç id: #{values[3]}'
                                 f'\nüíº–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {values[1]}'
                                 f'\n‚è∞–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {values[5]}'
                                 '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                 f'\n\n‚è≥–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...')

            status_post = call.data
            connection.edit_status_post(status_post, post_id)
            user_ids, subscription_count = connection.provider_mailing(post_id)
            success_mailing = 0
            for user_id in user_ids:
                try:
                    if not user_id[0] in admin_id:
                        await bot.send_message(user_id[0], f'\n\nüìÆ{values[2]}'
                                    f'\n\nüëâ{values[4]}'
                                    f'\n\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: https://vk.com/wall-{str(group_id)}_{str(post_id)}') 
                    success_mailing += 1
                except BotBlocked:
                    pass
                await asyncio.sleep(5)

            await call.message.edit_text('‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                     f'\nüìã–ü–æ—Å—Ç id: #{values[3]}'
                     f'\nüíº–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {values[1]}'
                     f'\n‚è∞–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {values[5]}'
                     '\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                     f'\n\n‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {str(success_mailing)} –∏–∑ {str(subscription_count)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

        elif call.data == 'post_cancel':
            status_post = call.data
            connection.edit_status_post(status_post, values[3])
            await call.message.edit_text('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')

        elif call.data == 'back':
            await call.message.edit_text('–ù–æ–≤–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ', reply_markup=post_news)

@dp.message_handler(commands=['start', 'user'])
async def start(message: Message, state: FSMContext):
    async with state.proxy() as data: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        data['user_contact'] = message.text
        user_id = message.chat.id
        is_reg = connection.check_registration(user_id)

        if is_reg is None:
            await message.answer('–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–≤–æ–π –Ω–æ–º–µ—Ä', reply_markup=request_phone)
            await Post.waiting_contact.set()

        else:
            await message.answer('üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,</b> –í–∞—Å –≤ –Ω–∞—à–µ–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –Ω–∞–º :)', parse_mode='html', reply_markup=markup)
        

@dp.message_handler(state=Post.waiting_contact, content_types=['contact'])
async def handle_contact(message: Message, state: FSMContext):
    async with state.proxy() as data: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        user_id = message.chat.id
        user_name = message.from_user.username
        phone_number = message.contact.phone_number

        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ üòã", reply_markup=markup)

        referrer_id = re.findall('\d+', data['user_contact'])
        await state.finish()
        if referrer_id:
            if referrer_id != user_id:
                try:
                    await bot.send_message(referrer_id[0], '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
                except BotBlocked:
                    pass

        connection.register_user(user_id, user_name, phone_number, referrer_id)



@dp.message_handler(content_types=['text'])
async def user_buttons(message: Message):

    if message.text == 'üì©–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏':
        await message.answer('–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤')

        keyboard = InlineKeyboardMarkup()
        rows = connection.get_news(message.chat.id)

        subscribed_news = rows[1]

        for row in rows[0]:
            if rows[1][0] is not None and row[0] in subscribed_news[0]:
                button = InlineKeyboardButton(text='‚úÖ' + row[1] + ' (–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)', callback_data="provider_" + str(row[0]))
                keyboard.add(button)
            else:
                button = InlineKeyboardButton(text=row[1], callback_data="provider_" + str(row[0]))
                keyboard.add(button)
    
        await message.answer('–°–ª–µ–¥–∏–º –∑–∞: ', reply_markup=keyboard)


    elif message.text == 'üì¨–ú–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏':
        await message.answer('–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã')

        my_news = InlineKeyboardMarkup()
        rows = connection.get_sub_news(message.chat.id)

        try:
            for row in rows:
                button = InlineKeyboardButton(text=row[1], callback_data="fkrovider_" + str(row[0]))
                my_news.add(button)
        except TypeError:
            pass
    
        await message.answer('–°–ª–µ–¥–∏–º –∑–∞: ', reply_markup=my_news)

    elif message.text == 'üì≤–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá', reply_markup=btn_ref)
    
    elif message.text == 'üîó–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É':
        await message.answer(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/{bot_nickname}?start={message.from_user.id}'
                             f'\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.', reply_markup=markup)
        
    elif message.text == 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':      
        await message.answer(f'–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {connection.user_exists(message.chat.id)}', reply_markup=markup)

    elif message.text == 'üìî–û—Ç–∑—ã–≤—ã':
        await message.answer('üíå–û—Ç–∑—ã–≤—ã RTK | AI  - @example123'
                             '\n\n–ü–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ 500 —Ä—É–±–ª–µ–π –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É, –æ—Å—Ç–∞–≤–∏–≤ –æ—Ç–∑—ã–≤ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —É—Å–ª—É–≥ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ RTK!')

    elif message.text == 'üêç–û —Å–µ—Ä–≤–∏—Å–µ':
        await message.answer('ü§ñRTK | AI - –ª—É—á—à–∏–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å–≤—è–∑–∏'
                             '\n\n@exp_mars - –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞'
                             '\n\n–°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å–≤—è–∑–∏ –∏ –¥–µ–ª–∏—Ç—Å—è –∏–º–∏ —Å –Ω–∞—à–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
                             '\n\n> –ü–æ–ª—É—á–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–µ—â–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ–¥–∏–∞ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤'
                             '\n\n> –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏ —Å–≤—è–∑–∏')

    elif message.text == 'üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏':
        await message.answer('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏')

    elif message.text == '‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await message.answer('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏')

@dp.callback_query_handler(lambda call: 'provider' in call.data)
async def news_of_providers(call: CallbackQuery):
    with suppress(MessageNotModified):
        provider_id = call.data.split('_')[1]
        provider = connection.get_provider_name(provider_id, call.message.chat.id)

        try:
            if provider[0][0] in provider[1][0]:
                await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {provider[0][1]}', reply_markup=btn_subscribe)

            else:
                await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {provider[0][1]}', reply_markup=btn_stock)

        except TypeError:
            await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {provider[0][1]}', reply_markup=btn_stock)

@dp.callback_query_handler(lambda call: 'fkrovider' in call.data)
async def news_of_providers(call: CallbackQuery):
    with suppress(MessageNotModified): 

        provider_id = call.data.split('_')[1]
        rows = connection.get_provider_name(provider_id, call.message.chat.id)

        if rows[0][0] in rows[1][0]:
            await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω: {rows[0][1]}', reply_markup=my_btn_subscribe)


@dp.callback_query_handler(lambda call: 'set' in call.data)
async def news_settings(call: CallbackQuery):
    user_id = call.from_user.id
    with suppress(MessageNotModified):

        if call.data == 'set_subscribe':
            await bot.answer_callback_query(call.id)
            await call.message.edit_reply_markup(reply_markup=btn_subscribe)

            provider_name = call.message.text.split(':')[1].strip()
            connection.add_sub(call.data, user_id, provider_name)

        elif call.data == 'set_unsubscribe':
            await bot.answer_callback_query(call.id)
            await call.message.edit_reply_markup(reply_markup=btn_unsubscribe)

            provider_name = call.message.text.split(':')[1].strip()
            connection.add_sub(call.data, user_id, provider_name)

        elif call.data == 'set_back':
            
            keyboard = InlineKeyboardMarkup()
            rows = connection.get_news(call.message.chat.id)
            subscribed_news = rows[1]
            try:
                for row in rows[0]:
                    if row[0] in subscribed_news[0]:
                        button = InlineKeyboardButton(text='‚úÖ' + row[1] + ' (–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)', callback_data="provider_" + str(row[0]))
                        keyboard.add(button)
                    else:
                        button = InlineKeyboardButton(text=row[1], callback_data="provider_" + str(row[0]))
                        keyboard.add(button)
            except TypeError:
                button = InlineKeyboardButton(text=row[1], callback_data="provider_" + str(row[0]))
                keyboard.add(button)

            await call.message.edit_text('–°–ª–µ–¥–∏–º –∑–∞: ', reply_markup=keyboard)

@dp.callback_query_handler(lambda call: 'fket' in call.data)
async def news_settings(call: CallbackQuery):
    user_id = call.from_user.id
    with suppress(MessageNotModified):
        if call.data == 'fket_subscribe':
            await bot.answer_callback_query(call.id)
            await call.message.edit_reply_markup(reply_markup=my_btn_subscribe)

        elif call.data == 'fket_unsubscribe':
            await bot.answer_callback_query(call.id)
            await call.message.edit_reply_markup(reply_markup=my_btn_unsubscribe)

            provider_name = call.message.text.split(':')[1].strip()
            connection.add_sub(call.data, user_id, provider_name)

        elif call.data == 'fket_back':
            my_news = InlineKeyboardMarkup()
            rows = connection.get_sub_news(call.message.chat.id)

            try:
                for row in rows:
                    button = InlineKeyboardButton(text=row[1], callback_data="fkrovider_" + str(row[0]))
                    my_news.add(button)
            except TypeError:
                pass

            await call.message.edit_text('–°–ª–µ–¥–∏–º –∑–∞: ', reply_markup=my_news)